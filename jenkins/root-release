#!/usr/bin/env bash
set -e

### !!!!!!!!!!!!
### Used by ROOT only until 6-14!
### ROOT 6.16 and above use root-build.cmake in "package" mode!

 THIS=${PWD}/$(dirname $0)
 ARCH=$(uname -m)

echo source $THIS/jk-setup.sh $LABEL $COMPILER $BUILDTYPE NONE > setup.sh
source $THIS/jk-setup.sh $LABEL $COMPILER $BUILDTYPE NONE

echo "Dumping the full environment ---------------------------------------------------------"
env | sort | sed 's/:/:?     /g' | tr '?' '\n'
echo "--------------------------------------------------------------------------------------"

#---Create stampfile to enable our jenkins to purge old builds------------------------------
touch $WORKSPACE/controlfile

 if [[ ${SOURCE_PREFIX} == "" ]] ; then
    export ROOT_SOURCE_PREFIX=${PWD}/sources
 else
    export ROOT_SOURCE_PREFIX=${SOURCE_PREFIX}
 fi

 if [[ ${BUILD_PREFIX} == "" ]] ; then
    export ROOT_BUILD_PREFIX=${PWD}
 else
    export ROOT_BUILD_PREFIX=${BUILD_PREFIX}
 fi

 # ---- Version Specific Options ----
 r=$VERSION
 r=${r//./}       # Substitute "" for "." (remove all '.')
 r=${r//-rc*/}    # Substitute "" for "-rc*" (remove all '-rc[1,2,..]')
 r=${r//[a-z]/}   # Substitute "" for "a-z" (remove all patch letters).

 if [ $r -ge 60200 ] ; then
    export SOURCE_DIR=${ROOT_SOURCE_PREFIX}/root_v${VERSION}/root-${VERSION}
 else
    export SOURCE_DIR=${ROOT_SOURCE_PREFIX}/root_v${VERSION}/root
 fi

 export BUILD_DIR=${ROOT_BUILD_PREFIX}/build/root_v${VERSION}-cmake
 export INSTALL_DIR=${ROOT_BUILD_PREFIX}/install/ROOT/${VERSION}/

 if [[ ${LABEL} == *slc* ]] ; then
   export CMakeOptions="-DCMAKE_BUILD_TYPE=${BUILDTYPE} -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} \
   -Dall=ON -Dbuiltin_cfitsio=ON -Dbuiltin_davix=ON -Dbuiltin_freetype=ON -Dbuiltin_ftgl=ON \
   -Dbuiltin_glew=ON -Dbuiltin_gsl=ON -Dbuiltin_lzma=ON -Dbuiltin_pcre=ON -Dbuiltin_xrootd=ON \
   -Dbuiltin_fftw3=ON -Dbuiltin_zlib=OFF -Dbuiltin_nlohmannjson=ON -Dkrb5=ON ${ExtraCMakeOptions}"
 elif [[ ${LABEL} == *cc* ]] || [[ $LABEL == *centos* ]] ; then
   export CMakeOptions="-DCMAKE_BUILD_TYPE=${BUILDTYPE} -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} \
   -Dall=ON -Dbuiltin_cfitsio=ON -Dbuiltin_davix=ON -Dbuiltin_freetype=ON -Dbuiltin_ftgl=ON \
   -Dbuiltin_glew=ON -Dbuiltin_gsl=ON -Dbuiltin_lzma=ON -Dbuiltin_pcre=ON -Dbuiltin_xrootd=ON \
   -Dbuiltin_fftw3=ON -Dbuiltin_zlib=OFF -Dbuiltin_nlohmannjson=ON -Dkrb5=ON ${ExtraCMakeOptions}"
 elif [[ ${LABEL} == *mac101* ]] ; then
   export CMakeOptions="-DCMAKE_BUILD_TYPE=${BUILDTYPE} -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} \
   -Dall=ON -Dbuiltin_cfitsio=ON -Dbuiltin_davix=ON -Dbuiltin_freetype=ON -Dbuiltin_ftgl=ON \
   -Dbuiltin_glew=ON -Dbuiltin_gsl=ON -Dbuiltin_lzma=ON -Dbuiltin_pcre=ON -Dbuiltin_xrootd=ON \
   -Dbuiltin_fftw3=ON -Dbuiltin_zlib=OFF -Dbuiltin_nlohmannjson=ON -Dkrb5=ON -Dbuiltin_openssl=ON ${ExtraCMakeOptions}"
 elif [[ ${LABEL} == *mac* ]] ; then
   export CMakeOptions="-DCMAKE_BUILD_TYPE=${BUILDTYPE} -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} \
   -Dall=ON -Dbuiltin_cfitsio=ON -Dbuiltin_davix=ON -Dbuiltin_freetype=ON -Dbuiltin_ftgl=ON \
   -Dbuiltin_glew=ON -Dbuiltin_gsl=ON -Dbuiltin_lzma=ON -Dbuiltin_pcre=ON -Dbuiltin_xrootd=ON \
   -Dbuiltin_fftw3=ON -Dbuiltin_zlib=OFF -Dbuiltin_nlohmannjson=ON -Dkrb5=ON ${ExtraCMakeOptions}"
 elif [[ ${LABEL} == *ubuntu* ]] ; then
   # LCG needs a locally installed xroot; we want to use from the distro what the distro has.
   # The distro has no xroot, so use the builtin!
   export CMakeOptions="-DCMAKE_BUILD_TYPE=${BUILDTYPE} -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} \
   -Dall=ON -Dbuiltin_cfitsio=OFF -Dbuiltin_davix=ON -Dbuiltin_freetype=ON -Dbuiltin_ftgl=ON \
   -Dbuiltin_glew=ON -Dbuiltin_gsl=ON -Dbuiltin_lzma=ON -Dbuiltin_pcre=ON -Dbuiltin_xrootd=ON \
   -Dbuiltin_fftw3=ON -Dbuiltin_zlib=OFF -Dbuiltin_nlohmannjson=ON ${ExtraCMakeOptions}"
 else
   export CMakeOptions="-DCMAKE_BUILD_TYPE=${BUILDTYPE} -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} \
   -Dall=ON -Dbuiltin_cfitsio=OFF -Dbuiltin_davix=ON -Dbuiltin_freetype=ON -Dbuiltin_ftgl=ON \
   -Dbuiltin_glew=ON -Dbuiltin_gsl=ON -Dbuiltin_lzma=ON -Dbuiltin_pcre=ON -Dbuiltin_xrootd=OFF \
   -Dbuiltin_fftw3=ON -Dbuiltin_zlib=OFF -Dbuiltin_nlohmannjson=ON ${ExtraCMakeOptions}"
 fi

 echo "Dumping some variables ---------------------------------------------------------------"
 echo "User name: " `whoami`
 echo "Machine name: " `uname -n`
 echo "Architecture: " `uname -m`
 echo "Compiler/version: " `${CXX} --version`
 echo "Python: " `which python`
 python --version
 echo "CMake options: " "${CMakeOptions}"
 echo "--------------------------------------------------------------------------------------"

 if [ ! -d "${ROOT_SOURCE_PREFIX}/root_v${VERSION}"  ]; then
   mkdir -p ${ROOT_SOURCE_PREFIX}/root_v${VERSION}
 fi
 cd ${ROOT_SOURCE_PREFIX}/root_v${VERSION}
 if [[ ${LABEL} == *mac* ]] ; then
   curl -O https://root.cern.ch/download/root_v${VERSION}.source.tar.gz
 else
   wget https://root.cern.ch/download/root_v${VERSION}.source.tar.gz
 fi
 tar -zxf root_v${VERSION}.source.tar.gz

 # Eventually apply a patch (only patches in release procedures)
 if [ -f $THIS/patches/root_v${VERSION}.patch ]; then
   patch -p1 -d ${SOURCE_DIR} -i $THIS/patches/root_v${VERSION}.patch
 fi

 mkdir -p ${BUILD_DIR}
 cd ${BUILD_DIR}

 cmake ${CMakeOptions} ${SOURCE_DIR}

 # now lets start the build (e.g. cmake --build . --config Release)
 #cmake --build . --config ${BUILDTYPE}
 # or:
 make -j4

 if [ -f bin/root.exe ]; then
   # create the binary tar file
   cpack
   #cp root_v${VERSION}.*.tar.gz /afs/cern.ch/user/b/bellenot/scratch0/root_v${VERSION}.Linux-slc6_amd64-gcc4.8.tar.gz
 fi

# cd ${BUILD_DIR}
# /afs/cern.ch/user/b/bellenot/scripts/cmake/sendmail.sh "${VERSION}" "${BUILD_DIR}"
# cd ..

